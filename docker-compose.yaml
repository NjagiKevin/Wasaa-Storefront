networks:
  storefront-network:
    external: true

volumes:
  airflow_postgres_data:
  mlflow_postgres_data:
  redis_data:
  airflow_logs:
  mlflow_artifacts:
  

x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  env_file:
    - .env

  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow_secure_pass@airflow-postgres:5432/airflow_db
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    AIRFLOW__WEBSERVER__SECRET_KEY: "storefront-airflow-secret-key-2024"
    AIRFLOW__CORE__FERNET_KEY: "ZmDfcTF7_60GrrY167zsiPd67pEvs0aGqv7gp7Es5vM="
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    AIRFLOW__WEBSERVER__RBAC: "true"
    AIRFLOW__WEBSERVER__AUTHENTICATE: "true"
    PYTHONPATH: /opt/airflow:/opt/airflow/dags:/opt/airflow/app
    MLFLOW_TRACKING_URI: http://mlflow:5000
    MLFLOW_EXPERIMENT_NAME: storefront-ml
    DB_HOST: storefront_postgres
    DB_PORT: 5432
    DB_USER: storefront_user
    DB_PASS: storefront_secure_pass
    DB_NAME: storefront_db
    POSTGRES_SERVER: storefront_postgres
    POSTGRES_PORT: 5432
    POSTGRES_USER: storefront_user
    POSTGRES_PASSWORD: storefront_secure_pass
    POSTGRES_DB: storefront_db
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./app:/opt/airflow/app
    - ./data:/opt/airflow/data
    - ./models:/opt/airflow/models
    - ./scripts:/opt/airflow/scripts
  depends_on: &airflow-common-depends-on
    airflow-postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  networks:
    - storefront-network

services:
  # üóÑÔ∏è Airflow Database
  airflow-postgres:
    image: postgres:15-alpine
    container_name: storefront_airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow_secure_pass
      POSTGRES_DB: airflow_db
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - storefront-network

  # üóÑÔ∏è MLflow Database
  mlflow-postgres:
    image: postgres:15-alpine
    container_name: storefront_mlflow_postgres
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_secure_pass
      POSTGRES_DB: mlflow_db
    volumes:
      - mlflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - storefront-network

  # üî¥ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: storefront_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - storefront-network

  # üìä MLflow Server
  mlflow:
    build:
      context: ./airflow
      dockerfile: Dockerfile.mlflow
    container_name: storefront_mlflow
    ports:
      - "5000:5000"
    environment:
      BACKEND_STORE_URI: postgresql://mlflow:mlflow_secure_pass@mlflow-postgres:5432/mlflow_db
      ARTIFACT_ROOT: /mlflow/artifacts
      MLFLOW_SERVER_HOST: 0.0.0.0
      MLFLOW_SERVER_PORT: 5000
      MLFLOW_TRACKING_USERNAME: mlflow
      MLFLOW_TRACKING_PASSWORD: mlflow_secure_pass
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    command: [
      "mlflow", "server",
      "--backend-store-uri", "postgresql://mlflow:mlflow_secure_pass@mlflow-postgres:5432/mlflow_db",
      "--default-artifact-root", "/mlflow/artifacts",
      "--host", "0.0.0.0",
      "--port", "5000",
      "--serve-artifacts",
      "--registry-store-uri", "postgresql://mlflow:mlflow_secure_pass@mlflow-postgres:5432/mlflow_db"
    ]
    depends_on:
      mlflow-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - storefront-network

  # üåê Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: storefront_airflow_webserver
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    restart: unless-stopped

  # ‚è∞ Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: storefront_airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    restart: unless-stopped

  # ‚öôÔ∏è Airflow Init (runs once)
  airflow-init:
    <<: *airflow-common
    container_name: storefront_airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Starting Airflow initialization..." && \
        airflow db init && \
        echo "Creating admin user..." && \
        airflow users create \
          --username $${_AIRFLOW_WWW_USER_USERNAME:-admin} \
          --firstname Storefront \
          --lastname Admin \
          --role Admin \
          --email admin@storefront.com \
          --password $${_AIRFLOW_WWW_USER_PASSWORD:-admin_secure_2024} && \
        echo "Airflow initialization completed!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
    restart: "no"

  # üöÄ FastAPI App
  api:
    build: .
    container_name: storefront_api
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_SERVER: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_EXPERIMENT_NAME: storefront-ml
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - storefront-network